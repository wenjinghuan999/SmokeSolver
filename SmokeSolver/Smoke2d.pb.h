// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Smoke2d.proto

#ifndef PROTOBUF_Smoke2d_2eproto__INCLUDED
#define PROTOBUF_Smoke2d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ssv {
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Smoke2dInitParams;
class Smoke2dInitParamsDefaultTypeInternal;
extern Smoke2dInitParamsDefaultTypeInternal _Smoke2dInitParams_default_instance_;
}  // namespace ssv

namespace ssv {

namespace protobuf_Smoke2d_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Smoke2d_2eproto

// ===================================================================

class Smoke2dInitParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssv.Smoke2dInitParams) */ {
 public:
  Smoke2dInitParams();
  virtual ~Smoke2dInitParams();

  Smoke2dInitParams(const Smoke2dInitParams& from);

  inline Smoke2dInitParams& operator=(const Smoke2dInitParams& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Smoke2dInitParams& default_instance();

  static inline const Smoke2dInitParams* internal_default_instance() {
    return reinterpret_cast<const Smoke2dInitParams*>(
               &_Smoke2dInitParams_default_instance_);
  }

  void Swap(Smoke2dInitParams* other);

  // implements Message ----------------------------------------------

  inline Smoke2dInitParams* New() const PROTOBUF_FINAL { return New(NULL); }

  Smoke2dInitParams* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Smoke2dInitParams& from);
  void MergeFrom(const Smoke2dInitParams& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Smoke2dInitParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 nx = 1;
  void clear_nx();
  static const int kNxFieldNumber = 1;
  ::google::protobuf::uint32 nx() const;
  void set_nx(::google::protobuf::uint32 value);

  // uint32 ny = 2;
  void clear_ny();
  static const int kNyFieldNumber = 2;
  ::google::protobuf::uint32 ny() const;
  void set_ny(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssv.Smoke2dInitParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 nx_;
  ::google::protobuf::uint32 ny_;
  mutable int _cached_size_;
  friend struct  protobuf_Smoke2d_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ssv.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  inline Result* New() const PROTOBUF_FINAL { return New(NULL); }

  Result* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ssv.Result)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 status_;
  mutable int _cached_size_;
  friend struct  protobuf_Smoke2d_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Smoke2dInitParams

// uint32 nx = 1;
inline void Smoke2dInitParams::clear_nx() {
  nx_ = 0u;
}
inline ::google::protobuf::uint32 Smoke2dInitParams::nx() const {
  // @@protoc_insertion_point(field_get:ssv.Smoke2dInitParams.nx)
  return nx_;
}
inline void Smoke2dInitParams::set_nx(::google::protobuf::uint32 value) {
  
  nx_ = value;
  // @@protoc_insertion_point(field_set:ssv.Smoke2dInitParams.nx)
}

// uint32 ny = 2;
inline void Smoke2dInitParams::clear_ny() {
  ny_ = 0u;
}
inline ::google::protobuf::uint32 Smoke2dInitParams::ny() const {
  // @@protoc_insertion_point(field_get:ssv.Smoke2dInitParams.ny)
  return ny_;
}
inline void Smoke2dInitParams::set_ny(::google::protobuf::uint32 value) {
  
  ny_ = value;
  // @@protoc_insertion_point(field_set:ssv.Smoke2dInitParams.ny)
}

// -------------------------------------------------------------------

// Result

// uint32 status = 1;
inline void Result::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 Result::status() const {
  // @@protoc_insertion_point(field_get:ssv.Result.status)
  return status_;
}
inline void Result::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ssv.Result.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ssv

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Smoke2d_2eproto__INCLUDED
