// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Smoke2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Smoke2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ssv {
class Smoke2dInitParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Smoke2dInitParams> {
} _Smoke2dInitParams_default_instance_;
class ResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Result> {
} _Result_default_instance_;

namespace protobuf_Smoke2d_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Smoke2dInitParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Smoke2dInitParams, nx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Smoke2dInitParams, ny_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, status_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Smoke2dInitParams)},
  { 6, -1, sizeof(Result)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Smoke2dInitParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Result_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Smoke2d.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Smoke2dInitParams_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Result_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Smoke2dInitParams_default_instance_.DefaultConstruct();
  _Result_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rSmoke2d.proto\022\003ssv\"+\n\021Smoke2dInitParam"
      "s\022\n\n\002nx\030\001 \001(\r\022\n\n\002ny\030\002 \001(\r\"\030\n\006Result\022\016\n\006s"
      "tatus\030\001 \001(\r28\n\007Smoke2d\022-\n\004Init\022\026.ssv.Smo"
      "ke2dInitParams\032\013.ssv.Result\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 157);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Smoke2d.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Smoke2d_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Smoke2dInitParams::kNxFieldNumber;
const int Smoke2dInitParams::kNyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Smoke2dInitParams::Smoke2dInitParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Smoke2d_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssv.Smoke2dInitParams)
}
Smoke2dInitParams::Smoke2dInitParams(const Smoke2dInitParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nx_, &from.nx_,
    reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
  // @@protoc_insertion_point(copy_constructor:ssv.Smoke2dInitParams)
}

void Smoke2dInitParams::SharedCtor() {
  ::memset(&nx_, 0, reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
  _cached_size_ = 0;
}

Smoke2dInitParams::~Smoke2dInitParams() {
  // @@protoc_insertion_point(destructor:ssv.Smoke2dInitParams)
  SharedDtor();
}

void Smoke2dInitParams::SharedDtor() {
}

void Smoke2dInitParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Smoke2dInitParams::descriptor() {
  protobuf_Smoke2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Smoke2d_2eproto::file_level_metadata[0].descriptor;
}

const Smoke2dInitParams& Smoke2dInitParams::default_instance() {
  protobuf_Smoke2d_2eproto::InitDefaults();
  return *internal_default_instance();
}

Smoke2dInitParams* Smoke2dInitParams::New(::google::protobuf::Arena* arena) const {
  Smoke2dInitParams* n = new Smoke2dInitParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Smoke2dInitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ssv.Smoke2dInitParams)
  ::memset(&nx_, 0, reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
}

bool Smoke2dInitParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssv.Smoke2dInitParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 nx = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ny = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssv.Smoke2dInitParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssv.Smoke2dInitParams)
  return false;
#undef DO_
}

void Smoke2dInitParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssv.Smoke2dInitParams)
  // uint32 nx = 1;
  if (this->nx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nx(), output);
  }

  // uint32 ny = 2;
  if (this->ny() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ny(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssv.Smoke2dInitParams)
}

::google::protobuf::uint8* Smoke2dInitParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssv.Smoke2dInitParams)
  // uint32 nx = 1;
  if (this->nx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nx(), target);
  }

  // uint32 ny = 2;
  if (this->ny() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ny(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssv.Smoke2dInitParams)
  return target;
}

size_t Smoke2dInitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssv.Smoke2dInitParams)
  size_t total_size = 0;

  // uint32 nx = 1;
  if (this->nx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nx());
  }

  // uint32 ny = 2;
  if (this->ny() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ny());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Smoke2dInitParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssv.Smoke2dInitParams)
  GOOGLE_DCHECK_NE(&from, this);
  const Smoke2dInitParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Smoke2dInitParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssv.Smoke2dInitParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssv.Smoke2dInitParams)
    MergeFrom(*source);
  }
}

void Smoke2dInitParams::MergeFrom(const Smoke2dInitParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssv.Smoke2dInitParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nx() != 0) {
    set_nx(from.nx());
  }
  if (from.ny() != 0) {
    set_ny(from.ny());
  }
}

void Smoke2dInitParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssv.Smoke2dInitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Smoke2dInitParams::CopyFrom(const Smoke2dInitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssv.Smoke2dInitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Smoke2dInitParams::IsInitialized() const {
  return true;
}

void Smoke2dInitParams::Swap(Smoke2dInitParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Smoke2dInitParams::InternalSwap(Smoke2dInitParams* other) {
  std::swap(nx_, other->nx_);
  std::swap(ny_, other->ny_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Smoke2dInitParams::GetMetadata() const {
  protobuf_Smoke2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Smoke2d_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Smoke2dInitParams

// uint32 nx = 1;
void Smoke2dInitParams::clear_nx() {
  nx_ = 0u;
}
::google::protobuf::uint32 Smoke2dInitParams::nx() const {
  // @@protoc_insertion_point(field_get:ssv.Smoke2dInitParams.nx)
  return nx_;
}
void Smoke2dInitParams::set_nx(::google::protobuf::uint32 value) {
  
  nx_ = value;
  // @@protoc_insertion_point(field_set:ssv.Smoke2dInitParams.nx)
}

// uint32 ny = 2;
void Smoke2dInitParams::clear_ny() {
  ny_ = 0u;
}
::google::protobuf::uint32 Smoke2dInitParams::ny() const {
  // @@protoc_insertion_point(field_get:ssv.Smoke2dInitParams.ny)
  return ny_;
}
void Smoke2dInitParams::set_ny(::google::protobuf::uint32 value) {
  
  ny_ = value;
  // @@protoc_insertion_point(field_set:ssv.Smoke2dInitParams.ny)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Smoke2d_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssv.Result)
}
Result::Result(const Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:ssv.Result)
}

void Result::SharedCtor() {
  status_ = 0u;
  _cached_size_ = 0;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:ssv.Result)
  SharedDtor();
}

void Result::SharedDtor() {
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_Smoke2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Smoke2d_2eproto::file_level_metadata[1].descriptor;
}

const Result& Result::default_instance() {
  protobuf_Smoke2d_2eproto::InitDefaults();
  return *internal_default_instance();
}

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:ssv.Result)
  status_ = 0u;
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssv.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 status = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssv.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssv.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssv.Result)
  // uint32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssv.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ssv.Result)
  // uint32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssv.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ssv.Result)
  size_t total_size = 0;

  // uint32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssv.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssv.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssv.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssv.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssv.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssv.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_Smoke2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Smoke2d_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// uint32 status = 1;
void Result::clear_status() {
  status_ = 0u;
}
::google::protobuf::uint32 Result::status() const {
  // @@protoc_insertion_point(field_get:ssv.Result.status)
  return status_;
}
void Result::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:ssv.Result.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ssv

// @@protoc_insertion_point(global_scope)
